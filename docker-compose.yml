version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - smc_network
    restart: unless-stopped

  db:
    image: postgres:15
    container_name: myplatform_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-terminal7}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    restart: unless-stopped
    networks:
      - smc_network

  redis:
    image: redis:7
    container_name: myplatform_redis
    restart: unless-stopped
    networks:
      - smc_network

  django:
    build:
      context: ./django
      dockerfile: Dockerfile
    container_name: django_smc
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./django:/app
      - django_static_files:/app/static
      - django_media:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - mongodb
      - db
      - redis
    environment:
      - MONGO_HOST=mongodb
      - DJANGO_SETTINGS_MODULE=myproject.settings.dev
      - SECRET_KEY=a-secret-key-for-dev
    env_file:
      - .env
    networks:
      - smc_network
    restart: unless-stopped

  celery:
    build:
      context: ./django
      dockerfile: Dockerfile
    container_name: myplatform_celery_worker
    command: celery -A myproject worker -l info
    volumes:
      - django_static_files:/app/static
      - django_media:/app/media
    env_file:
      - .env
    depends_on:
      - django
      - redis
    networks:
      - smc_network
    restart: unless-stopped

  celery-beat:
    build:
      context: ./django
      dockerfile: Dockerfile
    container_name: myplatform_celery_beat
    command: celery -A myproject beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - django_static_files:/app/static
      - django_media:/app/media
    env_file:
      - .env
    depends_on:
      - django
      - redis
    networks:
      - smc_network
    restart: unless-stopped

  flower:
    image: mher/flower
    container_name: myplatform_flower
    command: flower --broker=redis://redis:6379/0 --address=0.0.0.0 --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - django
    networks:
      - smc_network
    restart: unless-stopped

  trader_bot:
    build:
      context: ./node-bot/trader-bot
    container_name: trader_bot
    ports:
      - "3001:3000"
    networks:
      - smc_network
    restart: unless-stopped

  smart_money_service:
    build:
      context: ./node-bot/smart_money_service
    container_name: smart_money_service
    depends_on:
      - mongodb
      - trader_bot
    environment:
      - MONGO_HOST=mongodb
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - TRADER_API_URL=http://trader_bot:3000
    networks:
      - smc_network
    env_file:
      - .env
    restart: unless-stopped

  node-payout-worker:
    build:
      context: ./node-wallet
      dockerfile: Dockerfile
    container_name: myplatform_node_payout_worker
    command: node workers/payout_worker.js
    depends_on:
      - redis
      - django
    env_file:
      - .env
    networks:
      - smc_network
    restart: unless-stopped

  node-deposit-monitor:
    build:
      context: ./node-wallet
      dockerfile: Dockerfile
    container_name: myplatform_node_deposit_monitor
    command: node workers/deposit_monitor.js
    depends_on:
      - django
      - redis
    env_file:
      - .env
    networks:
      - smc_network
    restart: unless-stopped

  node-api:
    build:
      context: ./node-wallet
      dockerfile: Dockerfile
    container_name: myplatform_node_api
    env_file:
      - .env
    depends_on:
      - redis
    networks:
      - smc_network
    restart: unless-stopped

  nginx:
    image: nginx:stable-alpine
    container_name: myplatform_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - django_static_files:/usr/share/nginx/html/static:ro
      - django_media:/usr/share/nginx/html/media:ro
    depends_on:
      - django
      - node-api
    networks:
      - smc_network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: myplatform_prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    depends_on:
      - django
    networks:
      - smc_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:9.5.3
    container_name: myplatform_grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - smc_network
    restart: unless-stopped

volumes:
  mongo-data:
  postgres_data:
  grafana_data:
  django_media:
  django_static_files:

networks:
  smc_network:
    driver: bridge
