# Generated by Django 5.2.1 on 2025-06-13 00:25

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Internal name, e.g., cross_arbitrage, defi_bot', max_length=100, unique=True, verbose_name='Bot Name')),
                ('title', models.CharField(help_text='Public name, e.g., Cross-Arbitrage Bot', max_length=255, verbose_name='Display Title')),
                ('is_active', models.BooleanField(default=False, help_text='Globally enable or disable this bot', verbose_name='Is Active')),
                ('investment_tool_slug', models.CharField(help_text='Slug of the corresponding InvestmentTool to check user access, e.g., cross_arbitrage', max_length=100, unique=True, verbose_name='Investment Tool Slug')),
            ],
            options={
                'verbose_name': 'Bot',
                'verbose_name_plural': 'Bots',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='MarketSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_market_cap', models.DecimalField(decimal_places=2, max_digits=30)),
                ('total_volume_24h', models.DecimalField(decimal_places=2, max_digits=30)),
                ('btc_dominance', models.DecimalField(decimal_places=2, max_digits=5)),
                ('eth_dominance', models.DecimalField(decimal_places=2, max_digits=5)),
                ('market_cap_change_24h', models.DecimalField(decimal_places=2, max_digits=6)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Market Summary',
                'verbose_name_plural': 'Market Summaries',
            },
        ),
        migrations.CreateModel(
            name='TrendingCoin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coingecko_id', models.CharField(db_index=True, max_length=100, unique=True)),
                ('symbol', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=100)),
                ('price', models.DecimalField(decimal_places=8, max_digits=20)),
                ('market_cap', models.BigIntegerField()),
                ('volume_24h', models.BigIntegerField()),
                ('price_change_24h', models.FloatField()),
                ('image_url', models.URLField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Trending Coin',
                'verbose_name_plural': 'Trending Coins',
                'ordering': ['-market_cap'],
            },
        ),
        migrations.CreateModel(
            name='CrossArbitrageBotSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fetch_interval_seconds', models.PositiveIntegerField(default=10, verbose_name='Fetch Interval (seconds)')),
                ('min_spread', models.DecimalField(decimal_places=4, default=0.15, max_digits=10, verbose_name='Minimum Spread')),
                ('trade_commission_percentage', models.DecimalField(decimal_places=4, default=0.001, help_text='Value in decimal format. E.g., 0.001 for 0.1%', max_digits=5, verbose_name='Trade Commission (%)')),
                ('min_trade_volume_percentage', models.DecimalField(decimal_places=2, default=2.5, max_digits=5, verbose_name='Min Trade Volume (%)')),
                ('max_trade_volume_percentage', models.DecimalField(decimal_places=2, default=10.0, max_digits=5, verbose_name='Max Trade Volume (%)')),
                ('rebalance_threshold_percentage', models.DecimalField(decimal_places=2, default=10.0, help_text='Trigger rebalance if a coin balance on an exchange is less than this percentage of its initial value.', max_digits=5, verbose_name='Rebalance Threshold (%)')),
                ('rebalance_delay_minutes', models.PositiveIntegerField(default=2, verbose_name='Rebalance Delay (minutes)')),
                ('bot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cross_arbitrage_settings', to='bot_gateway.bot')),
            ],
            options={
                'verbose_name': 'Cross-Arbitrage Bot Settings',
                'verbose_name_plural': 'Cross-Arbitrage Bot Settings',
            },
        ),
        migrations.CreateModel(
            name='DefiBotSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slippage_tolerance', models.DecimalField(decimal_places=2, default=0.5, max_digits=5, verbose_name='Slippage Tolerance (%)')),
                ('gas_price_level', models.CharField(choices=[('slow', 'Slow'), ('standard', 'Standard'), ('fast', 'Fast')], default='standard', max_length=10, verbose_name='Gas Price Level')),
                ('min_liquidity_usd', models.DecimalField(decimal_places=2, default=5000, max_digits=20, verbose_name='Minimum Liquidity (USD)')),
                ('bot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='defi_settings', to='bot_gateway.bot')),
            ],
            options={
                'verbose_name': 'DeFi Bot Settings',
                'verbose_name_plural': 'DeFi Bot Settings',
            },
        ),
        migrations.CreateModel(
            name='FlexibleArbitrageBotSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_open_positions', models.PositiveIntegerField(default=5, verbose_name='Max Open Positions')),
                ('min_profit_percentage', models.DecimalField(decimal_places=2, default=1.0, max_digits=5, verbose_name='Minimum Profit (%)')),
                ('asset_allocation_percentage', models.DecimalField(decimal_places=2, default=20.0, max_digits=5, verbose_name='Asset Allocation per Position (%)')),
                ('bot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='flexible_arbitrage_settings', to='bot_gateway.bot')),
            ],
            options={
                'verbose_name': 'Flexible Arbitrage Bot Settings',
                'verbose_name_plural': 'Flexible Arbitrage Bot Settings',
            },
        ),
        migrations.CreateModel(
            name='InterExchangeBotSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fetch_interval_seconds', models.PositiveIntegerField(default=10, verbose_name='Fetch Interval (seconds)')),
                ('min_spread', models.DecimalField(decimal_places=4, default=0.15, max_digits=10, verbose_name='Minimum Spread')),
                ('trade_commission_percentage', models.DecimalField(decimal_places=4, default=0.001, help_text='Value in decimal format. E.g., 0.001 for 0.1%', max_digits=5, verbose_name='Trade Commission (%)')),
                ('min_trade_volume_percentage', models.DecimalField(decimal_places=2, default=2.5, max_digits=5, verbose_name='Min Trade Volume (%)')),
                ('max_trade_volume_percentage', models.DecimalField(decimal_places=2, default=10.0, max_digits=5, verbose_name='Max Trade Volume (%)')),
                ('rebalance_threshold_percentage', models.DecimalField(decimal_places=2, default=10.0, help_text='Trigger rebalance if a coin balance on an exchange is less than this percentage of its initial value.', max_digits=5, verbose_name='Rebalance Threshold (%)')),
                ('rebalance_delay_minutes', models.PositiveIntegerField(default=2, verbose_name='Rebalance Delay (minutes)')),
                ('bot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='inter_exchange_settings', to='bot_gateway.bot')),
            ],
            options={
                'verbose_name': 'Inter-Exchange Bot Settings',
                'verbose_name_plural': 'Inter-Exchange Bot Settings',
            },
        ),
        migrations.CreateModel(
            name='Rebalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_exchange', models.CharField(max_length=100, verbose_name='From Exchange')),
                ('to_exchange', models.CharField(max_length=100, verbose_name='To Exchange')),
                ('coin_name', models.CharField(max_length=50, verbose_name='Coin Name')),
                ('quantity', models.DecimalField(decimal_places=8, max_digits=20, verbose_name='Quantity')),
                ('commission', models.DecimalField(decimal_places=8, max_digits=20, verbose_name='Commission')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Timestamp')),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rebalances', to='bot_gateway.bot', verbose_name='Bot')),
            ],
            options={
                'verbose_name': 'Rebalance',
                'verbose_name_plural': 'Rebalances',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SpotScalpingBotSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('indicator', models.CharField(choices=[('RSI', 'RSI'), ('MACD', 'MACD'), ('BB', 'Bollinger Bands')], default='RSI', max_length=50, verbose_name='Indicator')),
                ('timeframe', models.CharField(choices=[('1m', '1 minute'), ('5m', '5 minutes'), ('15m', '15 minutes')], default='5m', max_length=10, verbose_name='Timeframe')),
                ('rsi_period', models.PositiveIntegerField(blank=True, default=14, null=True, verbose_name='RSI Period')),
                ('rsi_overbought', models.PositiveIntegerField(blank=True, default=70, null=True, verbose_name='RSI Overbought Level')),
                ('rsi_oversold', models.PositiveIntegerField(blank=True, default=30, null=True, verbose_name='RSI Oversold Level')),
                ('bot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='spot_scalping_settings', to='bot_gateway.bot')),
            ],
            options={
                'verbose_name': 'Spot Scalping Bot Settings',
                'verbose_name_plural': 'Spot Scalping Bot Settings',
            },
        ),
        migrations.CreateModel(
            name='TradeBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exchange', models.CharField(max_length=100, verbose_name='Exchange')),
                ('coin_name', models.CharField(max_length=50, verbose_name='Coin Name')),
                ('side', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell')], max_length=4, verbose_name='Side')),
                ('quantity', models.DecimalField(decimal_places=8, max_digits=20, verbose_name='Quantity')),
                ('price', models.DecimalField(decimal_places=8, max_digits=20, verbose_name='Price')),
                ('total', models.DecimalField(decimal_places=8, max_digits=20, verbose_name='Total')),
                ('profit', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True, verbose_name='Profit')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Timestamp')),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trades', to='bot_gateway.bot', verbose_name='Bot')),
            ],
            options={
                'verbose_name': 'Trade Book',
                'verbose_name_plural': 'Trade Books',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Pool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exchange', models.CharField(max_length=100, verbose_name='Exchange')),
                ('coin_name', models.CharField(max_length=50, verbose_name='Coin Name')),
                ('balance', models.DecimalField(decimal_places=8, max_digits=20, verbose_name='Balance')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pools', to='bot_gateway.bot', verbose_name='Bot')),
            ],
            options={
                'verbose_name': 'Pool Balance',
                'verbose_name_plural': 'Pool Balances',
                'unique_together': {('bot', 'exchange', 'coin_name')},
            },
        ),
    ]
