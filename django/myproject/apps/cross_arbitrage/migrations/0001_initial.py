# Generated by Django 5.2.1 on 2025-05-11 19:51

import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='InvestmentConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strategy', models.CharField(default='cross_arbitrage', help_text='Название стратегии (например, cross_arbitrage)', max_length=64, unique=True)),
                ('payout_rate', models.DecimalField(decimal_places=5, default=Decimal('0.0012'), help_text='Процент в день (например, 0.0012 = 0.12%)', max_digits=6)),
                ('lock_days', models.IntegerField(default=30, help_text='Срок заморозки депозита (в днях)')),
                ('min_deposit', models.DecimalField(decimal_places=6, default=Decimal('100.000000'), help_text='Минимальный депозит для активации', max_digits=20)),
                ('is_active', models.BooleanField(default=True, help_text='Активна ли стратегия (если нет — выплаты не запускаются)')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='InvestmentAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=20)),
                ('activated', models.BooleanField(default=False)),
                ('target_wallet', models.CharField(blank=True, max_length=128, null=True)),
                ('lock_days', models.IntegerField(default=30)),
                ('activation_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='investment_account_cross_arbitrage', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='InvestmentDeposit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=6, max_digits=20)),
                ('tx_hash', models.CharField(blank=True, max_length=256, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deposits_cross_arbitrage', to='cross_arbitrage.investmentaccount')),
            ],
        ),
        migrations.CreateModel(
            name='TemporaryWallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=128, unique=True)),
                ('private_key_encrypted', models.TextField()),
                ('network', models.CharField(choices=[('trc20', 'TRC20'), ('arbitrum', 'Arbitrum One'), ('bep20', 'BNB Smart Chain (BEP20)')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='temp_wallets_cross_arbitrage', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WithdrawalRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=6, max_digits=18)),
                ('network', models.CharField(blank=True, choices=[('trc20', 'USDT - TRC20'), ('arbitrum', 'USDT - Arbitrum One'), ('bep20', 'USDT - BNB Smart Chain (BEP20)')], max_length=20, null=True)),
                ('target_wallet', models.CharField(blank=True, max_length=128, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('success', 'Success'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], db_index=True, default='pending', max_length=20)),
                ('tx_hash', models.CharField(blank=True, db_index=True, help_text='Хеш транзакции в блокчейне', max_length=256, null=True, unique=True)),
                ('error_message', models.TextField(blank=True, help_text='Сообщение об ошибке, если вывод не удался', null=True)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='withdrawal_requests', to='cross_arbitrage.investmentaccount')),
            ],
            options={
                'verbose_name': 'Запрос на вывод',
                'verbose_name_plural': 'Запросы на вывод',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='DailyPayout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount', models.DecimalField(decimal_places=6, max_digits=20)),
                ('tx_hash', models.CharField(blank=True, max_length=256, null=True)),
                ('success', models.BooleanField(default=False)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_payouts_cross_arbitrage', to='cross_arbitrage.investmentaccount')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('account', 'date')},
            },
        ),
    ]
