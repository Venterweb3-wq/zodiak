const express = require('express');
const AnalysisResult = require('../models/AnalysisResults');
const router = express.Router();

/**
 * GET /api/smart-indicators/:symbol
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
 */
router.get('/api/smart-indicators/:symbol', async (req, res) => {
  try {
    const { symbol } = req.params;
    const analysis = await AnalysisResult.getLatestForSymbol(symbol.toUpperCase());
    
    if (!analysis) {
      return res.status(404).json({
        error: 'Analysis not found',
        message: `No analysis data found for ${symbol}`
      });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const response = {
      symbol: analysis.symbol,
      price: analysis.price,
      last_updated: analysis.updatedAt,
      age_minutes: Math.round((Date.now() - analysis.updatedAt.getTime()) / 60000),
      
      technical_indicators: {
        rsi: {
          value: analysis.technical.rsi,
          signal: analysis.technical.rsi_signal,
          interpretation: getRSIInterpretation(analysis.technical.rsi, analysis.technical.rsi_signal)
        },
        ema: {
          ema_20: analysis.technical.ema_20,
          ema_50: analysis.technical.ema_50,
          trend: analysis.technical.ema_trend,
          interpretation: getEMAInterpretation(analysis.technical.ema_trend)
        },
        bollinger_bands: {
          upper: analysis.technical.bb_upper,
          middle: analysis.technical.bb_middle,
          lower: analysis.technical.bb_lower,
          position: analysis.technical.bb_position,
          interpretation: getBBInterpretation(analysis.technical.bb_position)
        },
        volume: {
          ma: analysis.technical.volume_ma,
          strength: analysis.technical.volume_strength,
          interpretation: getVolumeInterpretation(analysis.technical.volume_strength)
        },
        atr: {
          value: analysis.technical.atr,
          signal: analysis.technical.atr_signal,
          interpretation: getATRInterpretation(analysis.technical.atr_signal)
        },
        overall: {
          signal: analysis.technical.overall_signal,
          interpretation: getOverallInterpretation(analysis.technical.overall_signal)
        }
      },
      
      smart_money: {
        funding_rate: {
          value: analysis.smart_money.avg_funding_rate,
          signal: analysis.smart_money.funding_signal,
          interpretation: getFundingInterpretation(analysis.smart_money.funding_signal)
        },
        liquidations: {
          long: analysis.smart_money.long_liquidations,
          short: analysis.smart_money.short_liquidations,
          total: analysis.smart_money.total_liquidations,
          bias: analysis.smart_money.liquidation_bias,
          interpretation: getLiquidationInterpretation(analysis.smart_money.liquidation_bias)
        },
        open_interest: {
          value: analysis.smart_money.open_interest,
          signal: analysis.smart_money.oi_signal,
          interpretation: getOIInterpretation(analysis.smart_money.oi_signal)
        }
      },
      
      analysis: {
        recommendation: analysis.analysis.recommendation,
        confidence: Math.round(analysis.analysis.confidence * 100),
        final_score: analysis.analysis.final_score,
        technical_score: analysis.analysis.technical_score,
        reasoning: analysis.analysis.reasoning,
        entry_zone: analysis.analysis.entry_zone,
        stop_loss: analysis.analysis.stop_loss,
        take_profit: analysis.analysis.take_profit,
        risk_reward: analysis.analysis.risk_reward_ratio
      },
      
      market_context: analysis.market_context
    };

    res.json(response);
    
  } catch (error) {
    console.error('API Error:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});

/**
 * GET /api/smart-indicators
 * –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –∏–ª–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 */
router.get('/api/smart-indicators', async (req, res) => {
  try {
    const {
      recommendation,
      min_score,
      max_age_hours = 1,
      limit = 20,
      sort_by = 'final_score'
    } = req.query;

    // –°—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä
    const filter = {
      createdAt: { 
        $gte: new Date(Date.now() - parseInt(max_age_hours) * 60 * 60 * 1000) 
      }
    };

    if (recommendation && recommendation !== 'all') {
      filter['analysis.recommendation'] = recommendation;
    }

    if (min_score) {
      filter['analysis.final_score'] = { $gte: parseInt(min_score) };
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    const sortOptions = {
      final_score: { 'analysis.final_score': -1 },
      confidence: { 'analysis.confidence': -1 },
      updated: { 'updatedAt': -1 },
      symbol: { 'symbol': 1 }
    };

    const sort = sortOptions[sort_by] || sortOptions.final_score;

    const analyses = await AnalysisResult
      .find(filter)
      .sort(sort)
      .limit(parseInt(limit))
      .lean();

    const response = {
      total_found: analyses.length,
      filters_applied: {
        recommendation: recommendation || 'all',
        min_score: min_score || 'none',
        max_age_hours: parseInt(max_age_hours),
        sort_by
      },
      data: analyses.map(analysis => ({
        symbol: analysis.symbol,
        price: analysis.price,
        recommendation: analysis.analysis.recommendation,
        confidence: Math.round(analysis.analysis.confidence * 100),
        final_score: analysis.analysis.final_score,
        technical_score: analysis.analysis.technical_score,
        last_updated: analysis.updatedAt,
        age_minutes: Math.round((Date.now() - analysis.updatedAt.getTime()) / 60000),
        
        // –ö—Ä–∞—Ç–∫–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        technical_summary: {
          rsi: `${analysis.technical.rsi?.toFixed(1) || 'N/A'} (${analysis.technical.rsi_signal})`,
          trend: analysis.technical.ema_trend,
          bb_position: analysis.technical.bb_position,
          volume: analysis.technical.volume_strength,
          overall: analysis.technical.overall_signal
        },
        
        // –ö—Ä–∞—Ç–∫–∏–µ Smart Money –¥–∞–Ω–Ω—ã–µ
        smart_money_summary: {
          funding: analysis.smart_money.funding_signal,
          liquidations: analysis.smart_money.liquidation_bias,
          open_interest: analysis.smart_money.oi_signal
        }
      }))
    };

    res.json(response);
    
  } catch (error) {
    console.error('API Error:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});

/**
 * GET /api/smart-indicators/top-signals
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã —Å –≤—ã—Å–æ–∫–∏–º —Å–∫–æ—Ä–æ–º
 */
router.get('/api/smart-indicators/top-signals', async (req, res) => {
  try {
    const { limit = 10 } = req.query;
    
    const topSignals = await AnalysisResult.getTopSignals(parseInt(limit));
    
    const response = {
      total_signals: topSignals.length,
      data: topSignals.map(signal => ({
        symbol: signal.symbol,
        recommendation: signal.analysis.recommendation,
        final_score: signal.analysis.final_score,
        confidence: Math.round(signal.analysis.confidence * 100),
        price: signal.price,
        reasoning: signal.analysis.reasoning,
        entry_zone: signal.analysis.entry_zone,
        stop_loss: signal.analysis.stop_loss,
        take_profit: signal.analysis.take_profit,
        last_updated: signal.updatedAt,
        formatted: signal.getFormattedAnalysis()
      }))
    };

    res.json(response);
    
  } catch (error) {
    console.error('API Error:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});

/**
 * GET /api/smart-indicators/market-overview
 * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–æ —Ä—ã–Ω–∫—É
 */
router.get('/api/smart-indicators/market-overview', async (req, res) => {
  try {
    const overview = await AnalysisResult.getMarketOverview();
    
    const stats = {
      total_analyses: 0,
      recommendations: {
        buy: { count: 0, avg_score: 0, avg_confidence: 0 },
        sell: { count: 0, avg_score: 0, avg_confidence: 0 },
        wait: { count: 0, avg_score: 0, avg_confidence: 0 }
      },
      market_sentiment: 'neutral'
    };

    overview.forEach(item => {
      const rec = item._id || 'wait';
      stats.recommendations[rec] = {
        count: item.count,
        avg_score: Math.round(item.avgScore || 0),
        avg_confidence: Math.round((item.avgConfidence || 0) * 100)
      };
      stats.total_analyses += item.count;
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞
    const buyCount = stats.recommendations.buy.count;
    const sellCount = stats.recommendations.sell.count;
    
    if (buyCount > sellCount * 1.5) {
      stats.market_sentiment = 'bullish';
    } else if (sellCount > buyCount * 1.5) {
      stats.market_sentiment = 'bearish';
    }

    res.json(stats);
    
  } catch (error) {
    console.error('API Error:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});

/**
 * GET /api/smart-indicators/symbols
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
 */
router.get('/api/smart-indicators/symbols', async (req, res) => {
  try {
    const symbols = await AnalysisResult.distinct('symbol');
    
    res.json({
      total_symbols: symbols.length,
      symbols: symbols.sort()
    });
    
  } catch (error) {
    console.error('API Error:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
function getRSIInterpretation(value, signal) {
  const interpretations = {
    oversold: 'üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞',
    overbought: 'üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–∞–¥–µ–Ω–∏—è',
    bullish: 'üìà –ë—ã—á–∏–π –Ω–∞—Å—Ç—Ä–æ–π',
    bearish: 'üìâ –ú–µ–¥–≤–µ–∂–∏–π –Ω–∞—Å—Ç—Ä–æ–π',
    neutral: '‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞'
  };
  return interpretations[signal] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª';
}

function getEMAInterpretation(trend) {
  const interpretations = {
    strong_uptrend: 'üöÄ –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥',
    uptrend: 'üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥',
    sideways: '‚ÜîÔ∏è –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ',
    downtrend: 'üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥',
    strong_downtrend: 'üí• –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥'
  };
  return interpretations[trend] || '–¢—Ä–µ–Ω–¥ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
}

function getBBInterpretation(position) {
  const interpretations = {
    above_upper: 'üî¥ –í—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã - –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è',
    below_lower: 'üü¢ –ù–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ—Ç—Å–∫–æ–∫–∞',
    middle: '‚ö™ –í —Å—Ä–µ–¥–Ω–µ–π –∑–æ–Ω–µ - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ'
  };
  return interpretations[position] || '–ü–æ–∑–∏—Ü–∏—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞';
}

function getVolumeInterpretation(strength) {
  const interpretations = {
    very_strong: 'üí™ –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –æ–±—ä–µ–º',
    strong: 'üìä –°–∏–ª—å–Ω—ã–π –æ–±—ä–µ–º',
    normal: '‚ö™ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º',
    weak: 'üìâ –°–ª–∞–±—ã–π –æ–±—ä–µ–º',
    very_weak: 'üí§ –û—á–µ–Ω—å —Å–ª–∞–±—ã–π –æ–±—ä–µ–º'
  };
  return interpretations[strength] || '–û–±—ä–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
}

function getATRInterpretation(signal) {
  const interpretations = {
    high_volatility: '‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å',
    normal: '‚ö™ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å',
    low_volatility: 'üò¥ –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å'
  };
  return interpretations[signal] || '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞';
}

function getOverallInterpretation(signal) {
  const interpretations = {
    bullish: 'üêÇ –û–±—â–∏–π –±—ã—á–∏–π –Ω–∞—Å—Ç—Ä–æ–π',
    bearish: 'üêª –û–±—â–∏–π –º–µ–¥–≤–µ–∂–∏–π –Ω–∞—Å—Ç—Ä–æ–π',
    neutral: '‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è'
  };
  return interpretations[signal] || '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
}

function getFundingInterpretation(signal) {
  const interpretations = {
    extremely_positive: 'üî• –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π - –ø–µ—Ä–µ–≥—Ä–µ–≤',
    positive: 'üìà –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π - –±—ã—á–∏–π –Ω–∞—Å—Ç—Ä–æ–π',
    neutral: '‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
    negative: 'üìâ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π - –º–µ–¥–≤–µ–∂–∏–π –Ω–∞—Å—Ç—Ä–æ–π',
    extremely_negative: '‚ùÑÔ∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π - –¥–Ω–æ'
  };
  return interpretations[signal] || '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
}

function getLiquidationInterpretation(bias) {
  const interpretations = {
    long_heavy: 'üí• –ü–µ—Ä–µ–≤–µ—Å –ª–æ–Ω–≥-–ª–∏–∫–≤–∏–¥–∞—Ü–∏–π - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ—Ç—Å–∫–æ–∫–∞',
    short_heavy: 'üí• –ü–µ—Ä–µ–≤–µ—Å —à–æ—Ä—Ç-–ª–∏–∫–≤–∏–¥–∞—Ü–∏–π - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–∞–¥–µ–Ω–∏—è',
    balanced: '‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏',
    low_activity: 'üò¥ –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π'
  };
  return interpretations[bias] || '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
}

function getOIInterpretation(signal) {
  const interpretations = {
    very_high: 'üè¢ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π - –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å',
    high: 'üìä –í—ã—Å–æ–∫–∏–π - —Ö–æ—Ä–æ—à–∏–π –∏–Ω—Ç–µ—Ä–µ—Å',
    normal: '‚ö™ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π',
    low: 'üìâ –ù–∏–∑–∫–∏–π - —Å–ª–∞–±—ã–π –∏–Ω—Ç–µ—Ä–µ—Å',
    very_low: 'üí§ –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π - –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞'
  };
  return interpretations[signal] || '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
}

module.exports = router; 