const mongoose = require('mongoose');
const logger = require('../utils/logger');
const { calculateTechnicalIndicators } = require('../utils/indicators');

// –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
const CoinMarketDataSchema = new mongoose.Schema({
    symbol: String,
    timestamp: Date,
    cmc: mongoose.Schema.Types.Mixed,
    bybit: {
        kline: mongoose.Schema.Types.Mixed,
        markPriceKline: mongoose.Schema.Types.Mixed,
        fundingRateHistory: mongoose.Schema.Types.Mixed,
    },
    coinglass: {
        pairs_markets: mongoose.Schema.Types.Mixed,
    }
}, { strict: false, collection: 'coin_market_data' });

const AggregatedDataSchema = new mongoose.Schema({
    symbol: String,
    price: Number,
    avg_funding_rate: Number,
    best_funding_rate: {
        exchange: String,
        value: Number
    },
    sum_long_liquidations_usd: Number,
    sum_short_liquidations_usd: Number,
    avg_open_interest_usd: Number,
    top_volume_exchange: {
        exchange: String,
        volume_usd: Number
    },
    total_volume_usd: Number,
    technical_indicators: {
        rsi: Number,
        rsi_signal: String,
        ema_20: Number,
        ema_50: Number,
        ema_trend: String,
        bb_upper: Number,
        bb_middle: Number,
        bb_lower: Number,
        bb_position: String,
        atr: Number,
        atr_signal: String,
        volume_ma: Number,
        volume_strength: String,
        overall_signal: String
    }
}, { strict: false, collection: 'coin_market_aggregated' });

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
const CoinMarketData = mongoose.models.CoinMarketData || mongoose.model('CoinMarketData', CoinMarketDataSchema);
const AggregatedCoinData = mongoose.models.AggregatedCoinData || mongoose.model('AggregatedCoinData', AggregatedDataSchema);

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * @param {Object} cache - Redis –∫—ç—à (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
async function normalizeMarketData(cache = null) {
    logger.info('üîÑ –ó–∞–ø—É—Å–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ coin_market_data
        const rawDataList = await CoinMarketData.find({}).lean();
        logger.info(`üîé –ù–∞–π–¥–µ–Ω–æ ${rawDataList.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏`);
        
        if (rawDataList.length === 0) {
            logger.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ coin_market_data');
            return;
        }
        
        let processed = 0;
        let errors = 0;
        
        for (const doc of rawDataList) {
            try {
                const normalizedData = await normalizeDocument(doc);
                
                if (normalizedData) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    await AggregatedCoinData.findOneAndUpdate(
                        { symbol: normalizedData.symbol },
                        normalizedData,
                        { upsert: true, new: true }
                    );
                    processed++;
                    
                    // –ö—ç—à–∏—Ä—É–µ–º –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω Redis
                    if (cache) {
                        const cacheKey = `normalized:${normalizedData.symbol}`;
                        await cache.set(cacheKey, normalizedData, 300); // 5 –º–∏–Ω—É—Ç TTL
                    }
                } else {
                    errors++;
                    logger.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω ${doc.symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏`);
                }
                
            } catch (error) {
                errors++;
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ ${doc.symbol}:`, error.message);
                logger.error(`Stack trace: ${error.stack}`);
            }
        }
        
        logger.info(`‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`);
        
        return {
            processed,
            errors,
            total: rawDataList.length
        };
        
    } catch (error) {
        logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
        throw error;
    }
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @param {Object} doc - –°—ã—Ä–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ coin_market_data
 * @returns {Object} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
 */
async function normalizeDocument(doc) {
    if (!doc.symbol) {
        return null;
    }
    
    const symbol = doc.symbol;
    
    try {
        // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
        const price = extractPrice(doc);
        if (!price || price <= 0) {
            logger.warn(`‚ö†Ô∏è ${symbol}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É`);
            return null;
        }
        
        // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ CoinGlass (–ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏, —Ñ–∞–Ω–¥–∏–Ω–≥, OI)
        const smartMoneyData = extractSmartMoneyData(doc);
        
        // 3. –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑ Bybit –¥–∞–Ω–Ω—ã—Ö
        const technicalIndicators = extractTechnicalIndicators(doc);
        
        // 4. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        const normalizedDoc = {
            symbol: symbol,
            price: price,
            
            // Smart Money –¥–∞–Ω–Ω—ã–µ
            avg_funding_rate: smartMoneyData.avg_funding_rate,
            best_funding_rate: smartMoneyData.best_funding_rate,
            sum_long_liquidations_usd: smartMoneyData.sum_long_liquidations_usd,
            sum_short_liquidations_usd: smartMoneyData.sum_short_liquidations_usd,
            avg_open_interest_usd: smartMoneyData.avg_open_interest_usd,
            top_volume_exchange: smartMoneyData.top_volume_exchange,
            total_volume_usd: smartMoneyData.total_volume_usd,
            
            // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            technical_indicators: technicalIndicators,
            
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            updated_at: new Date(),
            data_sources: {
                cmc: !!doc.cmc,
                bybit: !!doc.bybit,
                coinglass: !!doc.coinglass
            },
            kline_data_bybit: doc.bybit && doc.bybit.kline ? doc.bybit.kline.map(candle => ({
                timestamp: parseInt(candle[0]),
                open: parseFloat(candle[1]),
                high: parseFloat(candle[2]),
                low: parseFloat(candle[3]),
                close: parseFloat(candle[4]),
                volume: parseFloat(candle[5]) || 0
            })) : [],
            smart_money_indicators: {
                // ... (—Ç—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ —Å–º–∞—Ä—Ç –º–∞–Ω–∏)
            }
        };
        
        return normalizedDoc;
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${symbol}:`, error.message);
        return null;
    }
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 */
function extractPrice(doc) {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: CMC -> Bybit -> CoinGlass
    if (doc.cmc && doc.cmc.quote && doc.cmc.quote.USD && doc.cmc.quote.USD.price) {
        return parseFloat(doc.cmc.quote.USD.price);
    }
    
    if (doc.bybit && doc.bybit.kline && doc.bybit.kline.length > 0) {
        const lastCandle = doc.bybit.kline[doc.bybit.kline.length - 1];
        if (lastCandle && lastCandle.close) {
            return parseFloat(lastCandle.close);
        }
    }
    
    if (doc.coinglass && doc.coinglass.pairs_markets && doc.coinglass.pairs_markets.length > 0) {
        const firstMarket = doc.coinglass.pairs_markets[0];
        if (firstMarket && firstMarket.current_price) {
            return parseFloat(firstMarket.current_price);
        }
    }
    
    return null;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Smart Money –¥–∞–Ω–Ω—ã—Ö –∏–∑ CoinGlass
 */
function extractSmartMoneyData(doc) {
    const defaultData = {
        avg_funding_rate: 0,
        best_funding_rate: { exchange: null, value: 0 },
        sum_long_liquidations_usd: 0,
        sum_short_liquidations_usd: 0,
        avg_open_interest_usd: 0,
        top_volume_exchange: { exchange: null, volume_usd: 0 },
        total_volume_usd: 0
    };
    
    if (!doc.coinglass || !doc.coinglass.pairs_markets || doc.coinglass.pairs_markets.length === 0) {
        return defaultData;
    }
    
    const markets = doc.coinglass.pairs_markets;
    
    let sum_funding_rate = 0;
    let funding_count = 0;
    let best_funding_rate = { exchange: null, value: 0 };
    let sum_long_liquidations_usd = 0;
    let sum_short_liquidations_usd = 0;
    let sum_open_interest_usd = 0;
    let oi_count = 0;
    let top_volume_exchange = { exchange: null, volume_usd: 0 };
    let total_volume_usd = 0;
    
    for (const market of markets) {
        // Funding Rate
        const fundingRate = parseFloat(market.funding_rate);
        if (!isNaN(fundingRate)) {
            sum_funding_rate += fundingRate;
            funding_count++;
            
            if (Math.abs(fundingRate) > Math.abs(best_funding_rate.value)) {
                best_funding_rate = {
                    exchange: market.exchange_name || market.exchange,
                    value: fundingRate
                };
            }
        }
        
        // Liquidations
        sum_long_liquidations_usd += parseFloat(market.long_liquidation_usd_24h) || 0;
        sum_short_liquidations_usd += parseFloat(market.short_liquidation_usd_24h) || 0;
        
        // Open Interest
        const openInterest = parseFloat(market.open_interest_usd);
        if (!isNaN(openInterest)) {
            sum_open_interest_usd += openInterest;
            oi_count++;
        }
        
        // Volume
        const volume = parseFloat(market.volume_usd);
        if (!isNaN(volume)) {
            total_volume_usd += volume;
            
            if (volume > top_volume_exchange.volume_usd) {
                top_volume_exchange = {
                    exchange: market.exchange_name || market.exchange,
                    volume_usd: volume
                };
            }
        }
    }
    
    return {
        avg_funding_rate: funding_count > 0 ? sum_funding_rate / funding_count : 0,
        best_funding_rate: best_funding_rate,
        sum_long_liquidations_usd: sum_long_liquidations_usd,
        sum_short_liquidations_usd: sum_short_liquidations_usd,
        avg_open_interest_usd: oi_count > 0 ? sum_open_interest_usd / oi_count : 0,
        top_volume_exchange: top_volume_exchange,
        total_volume_usd: total_volume_usd
    };
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
 */
function extractTechnicalIndicators(doc) {
    const defaultIndicators = {
        rsi: null,
        rsi_signal: 'unknown',
        ema_20: null,
        ema_50: null,
        ema_trend: 'unknown',
        bb_upper: null,
        bb_middle: null,
        bb_lower: null,
        bb_position: 'unknown',
        atr: null,
        atr_signal: 'unknown',
        volume_ma: null,
        volume_strength: 'unknown',
        overall_signal: 'neutral'
    };
    
    if (!doc.bybit || !doc.bybit.kline || doc.bybit.kline.length < 20) {
        return defaultIndicators;
    }
    
    try {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ Bybit –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        // Bybit kline —Ñ–æ—Ä–º–∞—Ç: [timestamp, open, high, low, close, volume, quote_volume]
        const priceHistory = doc.bybit.kline.map(candle => ({
            timestamp: parseInt(candle[0]),
            open: parseFloat(candle[1]),
            high: parseFloat(candle[2]),
            low: parseFloat(candle[3]),
            close: parseFloat(candle[4]),
            volume: parseFloat(candle[5]) || 0
        })).filter(candle => 
            !isNaN(candle.open) && !isNaN(candle.high) && 
            !isNaN(candle.low) && !isNaN(candle.close)
        );
        
        if (priceHistory.length < 20) {
            logger.warn(`‚ö†Ô∏è ${doc.symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (${priceHistory.length})`);
            return defaultIndicators;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        const indicators = calculateTechnicalIndicators(priceHistory);
        
        return {
            rsi: indicators.rsi ? parseFloat(indicators.rsi.toFixed(2)) : null,
            rsi_signal: indicators.rsi_signal || 'unknown',
            ema_20: indicators.ema_20 ? parseFloat(indicators.ema_20.toFixed(4)) : null,
            ema_50: indicators.ema_50 ? parseFloat(indicators.ema_50.toFixed(4)) : null,
            ema_trend: indicators.ema_trend || 'unknown',
            bb_upper: indicators.bb_upper ? parseFloat(indicators.bb_upper.toFixed(4)) : null,
            bb_middle: indicators.bb_middle ? parseFloat(indicators.bb_middle.toFixed(4)) : null,
            bb_lower: indicators.bb_lower ? parseFloat(indicators.bb_lower.toFixed(4)) : null,
            bb_position: indicators.bb_position || 'unknown',
            atr: indicators.atr ? parseFloat(indicators.atr.toFixed(4)) : null,
            atr_signal: indicators.atr_signal || 'unknown',
            volume_ma: indicators.volume_ma ? parseFloat(indicators.volume_ma.toFixed(0)) : null,
            volume_strength: indicators.volume_strength || 'unknown',
            overall_signal: indicators.overall_signal || 'neutral'
        };
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è ${doc.symbol}:`, error.message);
        return defaultIndicators;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
    normalizeMarketData,
    normalizeDocument,
    extractPrice,
    extractSmartMoneyData,
    extractTechnicalIndicators
}; 