const mongoose = require('mongoose');
const { loadConfig } = require('./config_loader');
const { getCacheManager } = require('./utils/cache');
const { getPriorityManager } = require('./utils/priority_queue');
const { analyzeCoin } = require('./utils/score');
const HistoricalDataService = require('./services/historical_data_service');
const SignalTracker = require('./services/signal_tracker');
const AnalysisSaver = require('./services/analysis_saver');
const appState = require('./utils/app_state');
const logger = require('./utils/logger');
const { normalizeMarketData } = require('./market_data_collector/market_collector');

// –ò–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const TechnicalDashboard = require('./utils/technical_dashboard');
const SignalDeduplication = require('./services/signal_deduplication');
const SignalScoring = require('./services/signal_scoring');
const TopNSelector = require('./services/top_n_selector');
const EnhancedMonitoring = require('./services/enhanced_monitoring');
const SupportResistanceAnalyzer = require('./utils/support_resistance_analyzer');

// –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
const CoinMarketDataSchema = new mongoose.Schema({
    symbol: String,
    timestamp: Date,
    cmc: mongoose.Schema.Types.Mixed,
    bybit: {
        kline: mongoose.Schema.Types.Mixed,
        markPriceKline: mongoose.Schema.Types.Mixed,
        fundingRateHistory: mongoose.Schema.Types.Mixed,
    },
    coinglass: {
        pairs_markets: mongoose.Schema.Types.Mixed,
    }
}, { strict: false, collection: 'coin_market_data' });

const AggregatedDataSchema = new mongoose.Schema({
    symbol: String,
    price: Number,
    avg_funding_rate: Number,
    best_funding_rate: {
        exchange: String,
        value: Number
    },
    sum_long_liquidations_usd: Number,
    sum_short_liquidations_usd: Number,
    avg_open_interest_usd: Number,
    top_volume_exchange: {
        exchange: String,
        volume_usd: Number
    },
    total_volume_usd: Number,
    technical_indicators: {
        rsi: Number,
        rsi_signal: String,
        ema_20: Number,
        ema_50: Number,
        ema_trend: String,
        bb_upper: Number,
        bb_middle: Number,
        bb_lower: Number,
        bb_position: String,
        atr: Number,
        atr_signal: String,
        volume_ma: Number,
        volume_strength: String,
        overall_signal: String,
        macd: mongoose.Schema.Types.Mixed,
        bollingerBands: mongoose.Schema.Types.Mixed,
        sma: { type: Number, default: 0 },
        stochastic: mongoose.Schema.Types.Mixed,
        adx: { type: Number, default: 0 },
        parabolicSar: mongoose.Schema.Types.Mixed,
        ichimokuCloud: mongoose.Schema.Types.Mixed,
        forceIndex: { type: Number, default: 0 },
        kst: mongoose.Schema.Types.Mixed
    }
}, { strict: false, collection: 'coin_market_aggregated' });

const CoinMarketData = mongoose.models.CoinMarketData || mongoose.model('CoinMarketData', CoinMarketDataSchema);
const AggregatedCoinData = mongoose.models.AggregatedCoinData || mongoose.model('AggregatedCoinData', AggregatedDataSchema);

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ analysis_results
 * @param {object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
 * @param {object} services - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
 */
async function analyzeAllCoins(config, services) {
  const startTime = Date.now();
  logger.info('üöÄ === –£–õ–£–ß–®–ï–ù–ù–´–ô –¶–ò–ö–õ –ê–ù–ê–õ–ò–ó–ê: ' + new Date().toISOString() + ' ===');
  
  try {
    const {
      cache,
      priorityManager,
      signalTracker,
      analysisSaver,
      technicalDashboard,
      signalDeduplication,
      enhancedMonitoring
    } = services;
    
    // 1. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
    logger.info('üìä –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await normalizeMarketData(cache);
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–µ—Ç
    logger.info('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–µ—Ç...');
    const coins = await AggregatedCoinData.find({}).lean();
    const analyzableCoins = filterAnalyzableCoins(coins);
    
    logger.info(`üìä –ö –∞–Ω–∞–ª–∏–∑—É: ${analyzableCoins.length} –º–æ–Ω–µ—Ç`);
    
    const candidateSignals = [];
    let processedCount = 0;
    
    // 3. –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–∫–æ—Ä–∏–Ω–≥–æ–º
    for (const coin of analyzableCoins) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      if (appState.isShutdownRequested()) {
        logger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É...');
        break;
      }
      
      const coinStartTime = Date.now();
      
      try {
        const srAnalyzer = new SupportResistanceAnalyzer(config.analyzer);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ S/R, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ kline
        const srLevels = srAnalyzer.calculateSupportResistance({ kline: coin.kline_data_bybit });

        // –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º S/R
        const analysisResult = analyzeCoin(coin, config, null, srLevels);
        
        // –†–∞—Å—á–µ—Ç TP/SL —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ BUY/SELL
        if (['buy', 'sell'].includes(analysisResult.decision)) {
            const entryPrice = parseFloat(coin.price);
            const { entry_zone, stop_loss, take_profit } = calculateTradeLevels(
                analysisResult.decision,
                entryPrice,
                srLevels
            );
            analysisResult.entry_zone = entry_zone;
            analysisResult.stop_loss = stop_loss;
            analysisResult.take_profit = take_profit;
        }
        
        // –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–æ—Ä–∞
        const technicalScore = TechnicalDashboard.getTechnicalScore(coin.technical_indicators);
        
        // –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫–æ—Ä–∞
        const finalScore = SignalScoring.calculateFinalScore(
          analysisResult,
          coin,
          technicalScore,
          srLevels
        );
        
        const processingTime = Date.now() - coinStartTime;
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await analysisSaver.saveAnalysisResult(
          coin.symbol,
          analysisResult,
          coin,
          technicalScore,
          finalScore,
          processingTime
        );
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        if (analysisResult.recommendation !== 'wait') {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
          const isDuplicate = await signalDeduplication.isDuplicateSignal(
            coin.symbol,
            analysisResult.recommendation,
            analysisResult
          );
          
          if (!isDuplicate) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫–æ—Ä –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∏–π
            if (finalScore >= 60) {
              candidateSignals.push({
                symbol: coin.symbol,
                analysisResult,
                marketData: coin,
                technicalScore,
                finalScore,
                technicalAnalysis: TechnicalDashboard.formatTechnicalAnalysis(coin),
                processingTime
              });
              
              logger.info(`‚ú® –ö–∞–Ω–¥–∏–¥–∞—Ç: ${coin.symbol} ${analysisResult.recommendation.toUpperCase()} (Score: ${finalScore})`);
            } else {
              logger.info(`‚ö™ –ù–∏–∑–∫–∏–π —Å–∫–æ—Ä: ${coin.symbol} (Score: ${finalScore})`);
            }
          }
        }
        
        processedCount++;
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –º–æ–Ω–µ—Ç
        if (processedCount % 10 === 0) {
          logger.info(`üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}/${analyzableCoins.length} –º–æ–Ω–µ—Ç`);
        }
        
      } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${coin.symbol}:`, error.message);
      }
    }
    
    logger.info(`\nüéØ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: ${candidateSignals.length}`);
    
    // 4. –û—Ç–±–æ—Ä —Ç–æ–ø-N —Å–∏–≥–Ω–∞–ª–æ–≤
    const maxSignals = 5; // –ú–∞–∫—Å–∏–º—É–º 5 —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —Ü–∏–∫–ª
    const selectedSignals = await TopNSelector.selectTopSignals(candidateSignals, maxSignals);
    
    // 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    logger.info(`\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ ${selectedSignals.length} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:`);
    
    for (const signal of selectedSignals) {
      try {
        await signalTracker.createSignal(signal.analysisResult, signal.marketData);
        
        logger.info(`\nüéØ –°–û–ó–î–ê–ù –°–ò–ì–ù–ê–õ: ${signal.symbol} ${signal.analysisResult.recommendation.toUpperCase()}`);
        logger.info(`üíØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä: ${signal.finalScore}`);
        logger.info(`üéØ Confidence: ${(signal.analysisResult.confidence * 100).toFixed(1)}%`);
        logger.info(`‚ö° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∫–æ—Ä: ${signal.technicalScore}`);
        logger.info(`üìä Reasoning: ${signal.analysisResult.reasoning.slice(0, 2).join(', ')}`);
        logger.info(signal.technicalAnalysis);
        
        if (signal.analysisResult.entry_zone && signal.analysisResult.stop_loss && signal.analysisResult.take_profit) {
            logger.info(`\nüìà –¢–û–†–ì–û–í–´–ï –£–†–û–í–ù–ò:`);
            logger.info(`  üéØ –ó–æ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal.analysisResult.entry_zone[0]} - ${signal.analysisResult.entry_zone[1]}`);
            logger.info(`  üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: ${signal.analysisResult.stop_loss}`);
            logger.info(`  üí∞ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${signal.analysisResult.take_profit}`);
        }

        logger.info(`\nüî¨ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:`);
        const techSummary = summarizeTechIndicators(signal.marketData.technical_indicators);
        Object.entries(techSummary).forEach(([key, value]) => {
            logger.info(`${key}: ${value}`);
        });
        
      } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è ${signal.symbol}:`, error.message);
      }
    }
    
    // 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ —Ü–∏–∫–ª–∞
    const cycleTime = Date.now() - startTime;
    const summary = enhancedMonitoring.generateCycleSummary(
      analyzableCoins,
      selectedSignals,
      cycleTime
    );
    
    // 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const saveStats = await analysisSaver.getStats();
    logger.info(`\nüíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:`);
    logger.info(`üìä –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: ${saveStats.total_analyses}`);
    logger.info(`üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: ${saveStats.last_24h}`);
    logger.info(`üèÜ –í—ã—Å–æ–∫–∏–π —Å–∫–æ—Ä (80+): ${saveStats.high_score_signals}`);
    
    return {
      processed: processedCount,
      candidates: candidateSignals.length,
      signals_created: selectedSignals.length,
      cycle_time: cycleTime,
      summary
    };
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ:', error);
    throw error;
  }
}

/**
 * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 */
function filterAnalyzableCoins(coins) {
  const stablecoins = ['USDT', 'USDC', 'DAI', 'BUSD', 'USDe', 'TUSD', 'USDD'];
  
  return coins.filter(coin => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
    if (stablecoins.some(s => coin.symbol.includes(s))) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!coin.price || coin.price <= 0) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    if (!coin.technical_indicators || !coin.technical_indicators.rsi) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if (!coin.data_sources || !coin.data_sources.bybit) {
      return false;
    }
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (coin.total_volume_usd && coin.total_volume_usd < 1000000) { // $1M –º–∏–Ω–∏–º—É–º
      return false;
    }
    
    return true;
  }).sort((a, b) => {
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—â–∏–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è–º (—É–±—ã–≤–∞–Ω–∏–µ)
    const liqA = (a.sum_long_liquidations_usd || 0) + (a.sum_short_liquidations_usd || 0);
    const liqB = (b.sum_long_liquidations_usd || 0) + (b.sum_short_liquidations_usd || 0);
    return liqB - liqA;
  });
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º
 */
function summarizeTechIndicators(indicators) {
    const summary = {};
    for (const key in indicators) {
        if (typeof indicators[key] === 'number') {
            summary[key] = indicators[key].toFixed(2);
        } else if (typeof indicators[key] === 'string') {
            summary[key] = indicators[key];
        }
    }
    return summary;
}

/**
 * –†–∞—Å—á–µ—Ç TP/SL –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω–µ–π
 * @param {string} decision - 'buy' –∏–ª–∏ 'sell'
 * @param {number} price - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
 * @param {Array<object>} srLevels - –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
 * @returns {object} - –ó–æ–Ω—ã –≤—Ö–æ–¥–∞, —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
 */
function calculateTradeLevels(decision, price, srLevels) {
    const supports = srLevels.filter(l => ['support', 'cluster'].includes(l.type)).map(l => l.price).sort((a, b) => b - a);
    const resistances = srLevels.filter(l => ['resistance', 'cluster'].includes(l.type)).map(l => l.price).sort((a, b) => a - b);

    let entry_zone, stop_loss, take_profit;

    if (decision === 'buy') {
        const nearest_support = supports.find(s => s < price) || price * 0.98;
        const nearest_resistance = resistances.find(r => r > price) || price * 1.04;
        
        entry_zone = [nearest_support, price].sort((a,b) => a-b);
        stop_loss = nearest_support * 0.99; // 1% –Ω–∏–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        take_profit = nearest_resistance * 0.99; // 1% –Ω–∏–∂–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    } else { // sell
        const nearest_resistance = resistances.find(r => r > price) || price * 1.02;
        const nearest_support = supports.find(s => s < price) || price * 0.96;

        entry_zone = [price, nearest_resistance].sort((a,b) => a-b);
        stop_loss = nearest_resistance * 1.01; // 1% –≤—ã—à–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        take_profit = nearest_support * 1.01; // 1% –≤—ã—à–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    }

    return {
        entry_zone: entry_zone.map(p => parseFloat(p.toFixed(5))),
        stop_loss: parseFloat(stop_loss.toFixed(5)),
        take_profit: parseFloat(take_profit.toFixed(5)),
    };
}

async function saveAnalysisResult(analysisData) {
    try {
        await AnalysisResult.deleteOne({ symbol: analysisData.symbol, timeframe: analysisData.timeframe });

        // –Ø–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ö–µ–º–æ–π
        const analysisToSave = {
            symbol: analysisData.symbol,
            timeframe: analysisData.timeframe,
            price: analysisData.price,
            market_cap_usd: analysisData.market_cap_usd,
            technical_indicators: analysisData.technical_indicators,
            is_candidate: analysisData.is_candidate,
            // –í–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç analysis
            analysis: {
                decision: analysisData.decision,
                confidence: analysisData.confidence,
                reasoning: analysisData.reasoning,
                final_score: analysisData.final_score,
                technical_score: analysisData.technical_score,
                smart_money_score: analysisData.smart_money_score,
                // –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
                entry_zone: analysisData.entry_zone,
                stop_loss: analysisData.stop_loss,
                take_profit: analysisData.take_profit,
            }
        };

        const resultToSave = new AnalysisResult(analysisToSave);
        await resultToSave.save();

        logger.info(`üíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${analysisData.symbol} (${analysisData.decision}, score: ${analysisData.final_score})`);
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è ${analysisData.symbol}: ${error.message}`);
        // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:
        logger.error("Data that failed to save: ", JSON.stringify(analysisData, null, 2));
    }
}

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä –ª—É—á—à–∏—Ö N –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
 */
function createFinalSignals(candidates, signalTracker) {
    logger.info(`\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ ${candidates.length} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:`);
    
    candidates.forEach(c => {
        signalTracker.createSignal(c);

        logger.info(`\nüéØ –°–û–ó–î–ê–ù –°–ò–ì–ù–ê–õ: ${c.symbol} ${c.decision.toUpperCase()}`);
        logger.info(`üíØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä: ${c.final_score}`);
        logger.info(`üéØ Confidence: ${c.confidence.toFixed(1)}%`);
        logger.info(`‚ö° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∫–æ—Ä: ${c.technical_score}`);
        if (c.reasoning) {
            logger.info(`üìä Reasoning: ${c.reasoning.join(', ')}`);
        }
        
        if (c.analysis.entry_zone && c.analysis.entry_zone.length === 2) {
            logger.info(`\nüìà –¢–û–†–ì–û–í–´–ï –£–†–û–í–ù–ò:`);
            logger.info(`  üéØ –ó–æ–Ω–∞ –≤—Ö–æ–¥–∞: ${c.analysis.entry_zone[0]} - ${c.analysis.entry_zone[1]}`);
            logger.info(`  üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: ${c.analysis.stop_loss}`);
            logger.info(`  üí∞ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${c.analysis.take_profit}`);
        }

        logger.info(`\nüî¨ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:`);
        const techSummary = summarizeTechIndicators(c.technical_indicators);
        Object.entries(techSummary).forEach(([key, value]) => {
            logger.info(`${key}: ${value}`);
        });
    });
}

module.exports = {
  analyzeAllCoins,
  normalizeMarketData,
  filterAnalyzableCoins,
  saveAnalysisResult,
  createFinalSignals
}; 