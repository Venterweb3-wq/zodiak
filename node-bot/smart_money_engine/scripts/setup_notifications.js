#!/usr/bin/env node

require('dotenv').config();
const readline = require('readline');
const fs = require('fs');
const path = require('path');
const NotificationService = require('../services/notification_service');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

async function setupNotifications() {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Smart Money Engine\n');
  
  const config = {};
  
  // Telegram setup
  console.log('üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram:');
  const setupTelegram = await question('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? (y/n): ');
  
  if (setupTelegram.toLowerCase() === 'y') {
    config.TELEGRAM_BOT_TOKEN = await question('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞: ');
    config.TELEGRAM_CHAT_ID = await question('–í–≤–µ–¥–∏—Ç–µ Chat ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ');
    
    console.log('\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å Chat ID:');
    console.log('1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–µ–º—É –±–æ—Ç—É');
    console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ https://api.telegram.org/bot<YOUR_BOT_TOKEN>/getUpdates');
    console.log('3. –ù–∞–π–¥–∏—Ç–µ "chat":{"id":YOUR_CHAT_ID}\n');
  }
  
  // Discord setup
  console.log('üí¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Discord:');
  const setupDiscord = await question('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Discord —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? (y/n): ');
  
  if (setupDiscord.toLowerCase() === 'y') {
    config.DISCORD_WEBHOOK_URL = await question('–í–≤–µ–¥–∏—Ç–µ Discord Webhook URL: ');
    
    console.log('\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å webhook:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ Discord');
    console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏" -> "–í–µ–±—Ö—É–∫–∏"');
    console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ URL\n');
  }
  
  // Save to .env file
  const envPath = path.join(__dirname, '../../.env');
  let envContent = '';
  
  try {
    envContent = fs.readFileSync(envPath, 'utf8');
  } catch (e) {
    console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π .env —Ñ–∞–π–ª...');
  }
  
  // Update or add new variables
  Object.entries(config).forEach(([key, value]) => {
    const regex = new RegExp(`^${key}=.*$`, 'm');
    if (regex.test(envContent)) {
      envContent = envContent.replace(regex, `${key}=${value}`);
    } else {
      envContent += `\n${key}=${value}`;
    }
  });
  
  fs.writeFileSync(envPath, envContent.trim() + '\n');
  console.log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ .env —Ñ–∞–π–ª');
  
  // Test notifications
  const testNotifications = await question('\nüß™ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ? (y/n): ');
  
  if (testNotifications.toLowerCase() === 'y') {
    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    const notificationService = new NotificationService(config);
    await notificationService.testNotification();
    
    // Test signal notification
    const testSignal = {
      symbol: 'BTC',
      type: 'buy',
      entryPrice: 106000,
      entryZone: { from: 105500, to: 106500 },
      stopLoss: 104000,
      takeProfit: 109000,
      confidence: 0.85,
      reasoning: [
        'üí• –ü–µ—Ä–µ–≤–µ—Å –ª–æ–Ω–≥-–ª–∏–∫–≤–∏–¥–∞—Ü–∏–π ($100M vs $20M)',
        'üìä –í—ã—Å–æ–∫–∏–π OI ($600M) ‚Äî –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å'
      ],
      marketConditions: {
        funding_rate: -0.005,
        long_liquidations: 100000000,
        short_liquidations: 20000000,
        open_interest: 600000000
      }
    };
    
    await notificationService.handleSignalEvent('created', testSignal);
  }
  
  console.log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.');
  
  rl.close();
}

// Run setup
setupNotifications().catch(console.error); 