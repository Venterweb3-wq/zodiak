const logger = require('../utils/logger');

class TopNSelector {
  /**
   * –û—Ç–æ–±—Ä–∞—Ç—å —Ç–æ–ø-N —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Å–∫–æ—Ä—É
   * @param {Array} candidateSignals - –ú–∞—Å—Å–∏–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
   * @param {number} maxSignals - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
   * @param {number} minScore - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä –¥–ª—è –æ—Ç–±–æ—Ä–∞
   * @returns {Array} –û—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã
   */
  static async selectTopSignals(candidateSignals, maxSignals = 5, minScore = 70) {
    if (!candidateSignals || candidateSignals.length === 0) {
      logger.info('üìä –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–±–æ—Ä–∞');
      return [];
    }

    logger.info(`\nüéØ –û–¢–ë–û–† –õ–£–ß–®–ò–• –°–ò–ì–ù–ê–õ–û–í –∏–∑ ${candidateSignals.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:`);

    // 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Å–∫–æ—Ä—É
    const qualifiedSignals = candidateSignals.filter(signal => signal.finalScore >= minScore);
    
    logger.info(`üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (score >= ${minScore}): ${qualifiedSignals.length} —Å–∏–≥–Ω–∞–ª–æ–≤`);

    if (qualifiedSignals.length === 0) {
      logger.info('‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º —Å–∫–æ—Ä–æ–º');
      return [];
    }

    // 2. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∫–æ—Ä—É (–æ—Ç –ª—É—á—à–µ–≥–æ –∫ —Ö—É–¥—à–µ–º—É)
    const sortedSignals = qualifiedSignals.sort((a, b) => b.finalScore - a.finalScore);
    
    // 3. –í—ã–±–æ—Ä –ª—É—á—à–∏—Ö N —Å–∏–≥–Ω–∞–ª–æ–≤
    const selectedSignals = sortedSignals.slice(0, maxSignals);
    
    // 4. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.logSelectionResults(selectedSignals, candidateSignals);
    
    return selectedSignals;
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–∏–ø—É
   */
  static groupSignalsByType(signals) {
    const groups = {
      buy: [],
      sell: []
    };

    signals.forEach(signal => {
      const type = signal.analysisResult.recommendation;
      if (groups[type]) {
        groups[type].push(signal);
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –ø–æ —Å–∫–æ—Ä—É
    groups.buy.sort((a, b) => b.finalScore - a.finalScore);
    groups.sell.sort((a, b) => b.finalScore - a.finalScore);

    logger.info(`üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: ${groups.buy.length} BUY, ${groups.sell.length} SELL`);
    
    return groups;
  }

  /**
   * –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  static balanceSignalTypes(groups, maxSignals) {
    const balanced = [];
    const { buy, sell } = groups;
    
    // –ï—Å–ª–∏ –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥—Ä—É–≥–æ–π, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ–≥–æ
    const maxPerType = Math.ceil(maxSignals * 0.8); // –ú–∞–∫—Å–∏–º—É–º 80% –æ—Ç –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
    
    // –ë–µ—Ä–µ–º –ª—É—á—à–∏–µ –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    const selectedBuy = buy.slice(0, Math.min(maxPerType, buy.length));
    const selectedSell = sell.slice(0, Math.min(maxPerType, sell.length));
    
    balanced.push(...selectedBuy, ...selectedSell);
    
    logger.info(`‚öñÔ∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: –≤–∑—è—Ç–æ ${selectedBuy.length} BUY + ${selectedSell.length} SELL`);
    
    return balanced;
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–±–æ—Ä–∞
   */
  static logSelectionResults(selectedSignals, allCandidates) {
    logger.info(`\nüèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ë–û–†: ${selectedSignals.length} —Å–∏–≥–Ω–∞–ª–æ–≤`);
    
    selectedSignals.forEach((signal, index) => {
      const rank = index + 1;
      const symbol = signal.symbol;
      const type = signal.analysisResult.recommendation.toUpperCase();
      const score = signal.finalScore;
      const confidence = (signal.analysisResult.confidence * 100).toFixed(1);
      const techScore = signal.technicalScore;
      
      logger.info(`${rank}. ${symbol} ${type} - Score: ${score}, Conf: ${confidence}%, Tech: ${techScore}`);
      
      // –¢–æ–ø-3 –ø—Ä–∏—á–∏–Ω—ã
      const reasons = signal.analysisResult.reasoning.slice(0, 3);
      logger.info(`   üí° ${reasons.join(' | ')}`);
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–±–æ—Ä–∞
    const avgScore = selectedSignals.reduce((sum, s) => sum + s.finalScore, 0) / selectedSignals.length;
    const buyCount = selectedSignals.filter(s => s.analysisResult.recommendation === 'buy').length;
    const sellCount = selectedSignals.filter(s => s.analysisResult.recommendation === 'sell').length;
    
    logger.info(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–¢–ë–û–†–ê:`);
    logger.info(`üìà –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä: ${avgScore.toFixed(1)}`);
    logger.info(`üü¢ BUY —Å–∏–≥–Ω–∞–ª—ã: ${buyCount}`);
    logger.info(`üî¥ SELL —Å–∏–≥–Ω–∞–ª—ã: ${sellCount}`);
    logger.info(`üéØ –û—Ç–æ–±—Ä–∞–Ω–æ: ${selectedSignals.length}/${allCandidates.length} (${(selectedSignals.length/allCandidates.length*100).toFixed(1)}%)`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º
   */
  static getSelectionAnalytics(candidateSignals) {
    if (!candidateSignals || candidateSignals.length === 0) {
      return { message: '–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞' };
    }

    const scores = candidateSignals.map(s => s.finalScore);
    const confidences = candidateSignals.map(s => s.analysisResult.confidence);
    const techScores = candidateSignals.map(s => s.technicalScore);

    const analytics = {
      total_candidates: candidateSignals.length,
      
      score_distribution: {
        min: Math.min(...scores),
        max: Math.max(...scores),
        avg: scores.reduce((a, b) => a + b, 0) / scores.length,
        above_80: scores.filter(s => s >= 80).length,
        above_70: scores.filter(s => s >= 70).length,
        above_60: scores.filter(s => s >= 60).length
      },
      
      confidence_distribution: {
        min: Math.min(...confidences),
        max: Math.max(...confidences),
        avg: confidences.reduce((a, b) => a + b, 0) / confidences.length,
        above_90: confidences.filter(c => c >= 0.9).length,
        above_80: confidences.filter(c => c >= 0.8).length,
        above_70: confidences.filter(c => c >= 0.7).length
      },
      
      technical_distribution: {
        min: Math.min(...techScores),
        max: Math.max(...techScores),
        avg: techScores.reduce((a, b) => a + b, 0) / techScores.length,
        positive: techScores.filter(t => t > 0).length,
        negative: techScores.filter(t => t < 0).length
      },
      
      signal_types: {
        buy: candidateSignals.filter(s => s.analysisResult.recommendation === 'buy').length,
        sell: candidateSignals.filter(s => s.analysisResult.recommendation === 'sell').length
      },
      
      top_symbols: this.getTopSymbols(candidateSignals, 5),
      top_reasons: this.getTopReasons(candidateSignals, 5)
    };

    return analytics;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å–∏–º–≤–æ–ª—ã –ø–æ —Å–∫–æ—Ä—É
   */
  static getTopSymbols(signals, limit = 5) {
    return signals
      .sort((a, b) => b.finalScore - a.finalScore)
      .slice(0, limit)
      .map(signal => ({
        symbol: signal.symbol,
        score: signal.finalScore,
        type: signal.analysisResult.recommendation,
        confidence: Math.round(signal.analysisResult.confidence * 100)
      }));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  static getTopReasons(signals, limit = 5) {
    const reasonCounts = {};
    
    signals.forEach(signal => {
      if (signal.analysisResult.reasoning) {
        signal.analysisResult.reasoning.forEach(reason => {
          reasonCounts[reason] = (reasonCounts[reason] || 0) + 1;
        });
      }
    });

    return Object.entries(reasonCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, limit)
      .map(([reason, count]) => ({ reason, count }));
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
   */
  static applyAdvancedFilters(signals, filters = {}) {
    let filtered = [...signals];

    // –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π confidence
    if (filters.minConfidence) {
      filtered = filtered.filter(s => s.analysisResult.confidence >= filters.minConfidence);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Å–∏–≥–Ω–∞–ª–∞
    if (filters.signalType && filters.signalType !== 'all') {
      filtered = filtered.filter(s => s.analysisResult.recommendation === filters.signalType);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–∫–æ—Ä—É
    if (filters.minTechnicalScore) {
      filtered = filtered.filter(s => s.technicalScore >= filters.minTechnicalScore);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–º–≤–æ–ª–∞–º (whitelist)
    if (filters.includeSymbols && filters.includeSymbols.length > 0) {
      filtered = filtered.filter(s => filters.includeSymbols.includes(s.symbol));
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–º–≤–æ–ª–∞–º (blacklist)
    if (filters.excludeSymbols && filters.excludeSymbols.length > 0) {
      filtered = filtered.filter(s => !filters.excludeSymbols.includes(s.symbol));
    }

    logger.info(`üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: ${signals.length} ‚Üí ${filtered.length} —Å–∏–≥–Ω–∞–ª–æ–≤`);
    
    return filtered;
  }
}

module.exports = TopNSelector; 