const Signal = require('../models/Signal');

class SignalDeduplication {
  constructor() {
    this.duplicateWindow = 2 * 60 * 60 * 1000; // 2 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    this.cache = new Map(); // –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–≥–Ω–∞–ª –¥—É–±–ª–∏–∫–∞—Ç–æ–º
   * @param {string} symbol - –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
   * @param {string} type - –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ (buy/sell)
   * @param {Object} analysisResult - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
   * @returns {boolean} true –µ—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç
   */
  async isDuplicateSignal(symbol, type, analysisResult) {
    const cacheKey = `${symbol}_${type}`;
    
    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫—ç—à—É
    if (this.cache.has(cacheKey)) {
      const cachedTime = this.cache.get(cacheKey);
      if (Date.now() - cachedTime < this.duplicateWindow) {
        console.log(`üîÑ –î—É–±–ª–∏–∫–∞—Ç –≤ –∫—ç—à–µ: ${symbol} ${type}`);
        return true;
      }
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const recentSignal = await Signal.findOne({
        symbol: symbol,
        type: type,
        created_at: {
          $gte: new Date(Date.now() - this.duplicateWindow)
        }
      }).sort({ created_at: -1 });

      if (recentSignal) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
        const conditionsChanged = this.haveConditionsChanged(recentSignal, analysisResult);
        
        if (!conditionsChanged) {
          console.log(`üîÑ –î—É–±–ª–∏–∫–∞—Ç –≤ –ë–î: ${symbol} ${type} (—Å–æ–∑–¥–∞–Ω ${this.getTimeAgo(recentSignal.created_at)})`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
          this.cache.set(cacheKey, Date.now());
          return true;
        } else {
          console.log(`üîÑ –£—Å–ª–æ–≤–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –¥–ª—è ${symbol} ${type}, —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª`);
        }
      }

      return false;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –¥–ª—è ${symbol}:`, error.message);
      return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —É—Å–ª–æ–≤–∏—è –∞–Ω–∞–ª–∏–∑–∞
   * @param {Object} oldSignal - –°—Ç–∞—Ä—ã–π —Å–∏–≥–Ω–∞–ª –∏–∑ –ë–î
   * @param {Object} newAnalysis - –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
   * @returns {boolean} true –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
   */
  haveConditionsChanged(oldSignal, newAnalysis) {
    if (!oldSignal.reasoning || !newAnalysis.reasoning) {
      return true; // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    const oldReasons = new Set(oldSignal.reasoning);
    const newReasons = new Set(newAnalysis.reasoning);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤
    const intersection = new Set([...oldReasons].filter(x => newReasons.has(x)));
    const union = new Set([...oldReasons, ...newReasons]);
    
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –ñ–∞–∫–∫–∞—Ä–∞
    const similarity = intersection.size / union.size;
    
    // –ï—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–Ω—å—à–µ 60%, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É—Å–ª–æ–≤–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    const significantChange = similarity < 0.6;
    
    if (significantChange) {
      console.log(`üìä –°—Ö–æ–∂–µ—Å—Ç—å —É—Å–ª–æ–≤–∏–π: ${(similarity * 100).toFixed(1)}% - —É—Å–ª–æ–≤–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å`);
      console.log(`üìä –°—Ç–∞—Ä—ã–µ: ${Array.from(oldReasons).slice(0, 3).join(', ')}`);
      console.log(`üìä –ù–æ–≤—ã–µ: ${Array.from(newReasons).slice(0, 3).join(', ')}`);
    }
    
    return significantChange;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–∑–∞–¥ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
   */
  getTimeAgo(date) {
    const now = new Date();
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 60) {
      return `${diffMins}–º –Ω–∞–∑–∞–¥`;
    } else {
      const diffHours = Math.floor(diffMins / 60);
      return `${diffHours}—á ${diffMins % 60}–º –Ω–∞–∑–∞–¥`;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
   */
  cleanupCache() {
    const now = Date.now();
    for (const [key, timestamp] of this.cache.entries()) {
      if (now - timestamp > this.duplicateWindow) {
        this.cache.delete(key);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
   */
  getStats() {
    return {
      cache_size: this.cache.size,
      duplicate_window_hours: this.duplicateWindow / (60 * 60 * 1000),
      cached_signals: Array.from(this.cache.keys())
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
   */
  clearCache() {
    this.cache.clear();
    console.log('üßπ –ö—ç—à –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω');
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –∫—ç—à (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è)
   */
  addToCache(symbol, type) {
    const cacheKey = `${symbol}_${type}`;
    this.cache.set(cacheKey, Date.now());
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è –ø–∞–∫–µ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
   * @param {Array} candidateSignals - –ú–∞—Å—Å–∏–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
   * @returns {Array} –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
   */
  async filterDuplicates(candidateSignals) {
    const filtered = [];
    
    for (const candidate of candidateSignals) {
      const isDuplicate = await this.isDuplicateSignal(
        candidate.symbol,
        candidate.analysisResult.recommendation,
        candidate.analysisResult
      );
      
      if (!isDuplicate) {
        filtered.push(candidate);
      }
    }
    
    console.log(`üîÑ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: ${candidateSignals.length} ‚Üí ${filtered.length} —Å–∏–≥–Ω–∞–ª–æ–≤`);
    return filtered;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
   */
  async getActiveSignals() {
    try {
      const activeSignals = await Signal.find({
        status: { $in: ['pending', 'active'] },
        created_at: {
          $gte: new Date(Date.now() - this.duplicateWindow)
        }
      }).select('symbol type created_at reasoning').lean();

      return activeSignals.map(signal => ({
        symbol: signal.symbol,
        type: signal.type,
        age_minutes: Math.floor((Date.now() - signal.created_at.getTime()) / 60000),
        reasoning_count: signal.reasoning?.length || 0
      }));

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:', error.message);
      return [];
    }
  }
}

module.exports = SignalDeduplication; 